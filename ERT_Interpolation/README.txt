**** Description ********************************************
Given a two-dimensional set of points with a function value f(x,y)
defined for every point (x,y), this python script linearly 
interpolates f(x, y) on a rectangular grid according to the Delaunay
triangulation of the points in (x,y). 
https://en.wikipedia.org/wiki/Delaunay_triangulation
This method generates a grid of simplexes (triangles) with the 
vertices being the (x,y) points supplied by the user. f(x1,y1),
where (x1,y2) is an arbitrary point in the grid, is then
linearly interpolated according to the barycentric coordinates 
for point (x1,x2) in the simplex that contains (x1,x2). 
f(x1,x2) is thus a weighted sum of f(x,y) at the simplex vertices
with the weights being the normalized barycentric coordinates.
https://en.wikipedia.org/wiki/Barycentric_coordinate_system#:~:text=In%20geometry%2C%20a%20barycentric%20coordinate,dimensional%20space%2C%20etc.).

Triangulation is performed using Scipy package spatial.Delaunay,
and the linear interpolation by Scipy package interpolate.griddata.

One challenge concerns the range of Delaunay triangulation, which terminates
at the boundary of the convex hull generated by the triangulation.
https://en.wikipedia.org/wiki/Convex_hull
Given a point beyond the boundary of the convex hull, there is no
simplex to define the barycentric interpolation. To interpolate beyond
the hull boundary, I defined an algorithm to identify the simplices on
the boundary and project some of the edges of these simplices to the 
edges of the supplied grid. These edges are those that are not at the 
hull boundary, meaning that if we chose a point immediately on either
side of these edges, we would still be in the convex hull.

After projecting these edges, the linear interpolation of f(x,y) between
endpoints (ex1,ey1) and (ex2,ey2) of that edge is used to interpolated
the projected edge. This algorithm places points for f(x,y) along the 
boundaries of the grid and increases the range of interpolation.
*************************************************************

**** Usage **************************************************
There are two input files that should be placed in the working
directory: data.txt and params.txt.

data.txt contains three columns of numbers where
the first two columns are (x,y) and the third column is
f(x,y). The length of the three columns should be equal.

params.txt contains the information to define the interpolation
grid. The parameters are listed below in the order that they
should be written to the file.
1. minimum value of x (first column of data.txt)
2. maximum value of x
3. minimum value of y (second column of data.txt)
4. maximum value of y1
5. number of grid points in x
6. number of grid points in y

After these two files are defined, the script can be run. The output
is a plot of the data call inter.pdf written to the working directory.
*************************************************************

**** Compilation instructions *******************************
1. Install Python 3.10. Recommend installing using the PyCharm
   IDE (version 2021.3.1 at the time of writing this README)
2. Necessary python packages. Can be installed through PyCharm or
   pip (https://pip.pypa.io/en/stable/installation/)
   - matplotlib (version 3.8.1 or later)
   - numpy (version 1.26.1 or later)
   - scipy (version 1.11.3 or later)
*************************************************************